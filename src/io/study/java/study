## 클래스 : 어떠한 사물, 정보 등을 표현 한 것
## 객체 : 그 클래스를 통해 실체화 된 것
          (new 연산자를 통해 객체를 생성 가능)
## 멤버변수 : 그 클래스가 표현하는 대상의 "속성"을 정의하기 위함
## 메소드 : 클래스를 통해 만든 객체가 수행 할 수 있는 "기능"
          기본적인 객체의 정보를 반환(getter)
          메소드에서는 전달 받은 값을 쓰던, 자신의 값을 쓰던 상관 없음
# 메소드 형식 : 접근제한자 반환형 메소드명(인자=파라미터=매개변수=argument)
           인자 : 반환 될 값 만들 때 필요로 한것
           반환형 : 무엇이 반환 되어야 하는지의 타입
                  반환형이 들어가면 반드시 해당 반환값을 리턴 해주어야함
                  
                  
## 인스턴스 멤버
# 인스턴스 필드와 인스턴스 메소드로 나뉘어짐
# 인스턴스 멤버는 객체가 있어야 사용이 가능함

## 정적(Static) 멤버
# 정적 필드와 정적 메소드로 나뉘어짐
# 객체 없이 클래스만으로 사용 가능
# 선언 방법 : 클래스 선언시 필드앞에 static 입력
# 사용 방법 : 클래스이름.필드;    클래스이름.메소드();

## 인스턴스멤버와 정적멤버 선택 기준
# 객체마다 다를 수 있는 필드값 => 인스턴스
# 메소드블록 {}안에 인스턴스필드 또는 인스턴스 메소드 사용 => 인스턴스
# 객체마다 값의 변화가 필요 없을때 => 정적
# 매개변수만으로 작성 또는 static필드로 사용될 경우

## 정적메소드 주의점
# 내부에 인스턴스 필드/메소드 사용불가 (객체 필요하기 때문)
# 메소드 블록 {} 안에 this 사용 불가

## 클래스 타입
# private : 자기 클래스 내에서만 사용 가능
# default : 같은 패키지 내에서 사용 가능
# protected : 같은 패키지 내에서 사용가능, 다른클래스(상속한 경우에만)
# public : 어디서나 사용 가능
